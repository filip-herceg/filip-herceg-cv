name: CI
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Audit (fail on critical)
        run: |
          audit_output=$(npm audit --json || true)
          echo "$audit_output" > audit.json
          critical=$(echo $audit_output | jq '.metadata.vulnerabilities.critical')
          echo "Critical vulnerabilities: $critical"
          if [ "$critical" != "0" ]; then echo "Failing due to critical vulns" && exit 1; fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: audit.json
  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - run: npm ci
      - run: npm run format:check
      - run: npm run lint
      - run: npm run typecheck
      - run: npm run build
      - run: npm test -- --coverage
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Dockerfile lint (hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      - name: Setup Helm
        uses: azure/setup-helm@v4
      - name: Helm lint
        run: helm lint ./helm
      - name: Validate rendered Helm templates (kubeconform)
        run: |
          helm template web ./helm --values ./helm/values.yaml > rendered.yaml
          docker run --rm -v "$PWD":/manifests ghcr.io/yannh/kubeconform:latest \
            -strict -ignore-missing-schemas -summary /manifests/rendered.yaml
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --verbose --redact --report-format sarif --report-path gitleaks.sarif
      - name: Upload SARIF (gitleaks)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gitleaks.sarif
  trivy-fs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'HIGH,CRITICAL'
      - name: Upload SARIF (trivy fs)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-fs.sarif
  codeql:
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3
  lighthouse:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - run: |
          npm start & npx wait-on http://localhost:3000 && npx @lhci/cli autorun
        env:
          PORT: 3000
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci
  a11y:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - name: Run pa11y-ci against local server
        run: |
          npm start &
          npx wait-on http://localhost:3000
          npx pa11y-ci
        env:
          PORT: 3000
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pa11y-screens
          path: pa11y-screenshots
  e2e:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npm run e2e
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: test-results
  docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build-test
      - e2e
      - lighthouse
      - static-analysis
      - security-audit
      - codeql
      - trivy-fs
      - gitleaks
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }},ghcr.io/${{ github.repository }}:latest
  supply-chain:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v5
      - name: Generate SBOM (syft)
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:latest
          output-file: sbom.spdx.json
      - name: Scan image (grype)
        uses: anchore/scan-action@v4
        with:
          image: ghcr.io/${{ github.repository }}:latest
          fail-build: false
      - uses: actions/upload-artifact@v4
        with:
          name: supply-chain-artifacts
          path: |
            sbom.spdx.json
