name: CI
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Audit (fail on critical)
        run: |
          audit_output=$(npm audit --json || true)
          echo "$audit_output" > audit.json
          critical=$(echo $audit_output | jq '.metadata.vulnerabilities.critical')
          echo "Critical vulnerabilities: $critical"
          if [ "$critical" != "0" ]; then echo "Failing due to critical vulns" && exit 1; fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: audit.json
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run typecheck
      - run: npm run build
      - run: npm test -- --coverage
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage
  lighthouse:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - run: |
          npm start & npx wait-on http://localhost:3000 && npx @lhci/cli autorun || echo "LH warnings only"
        env:
          PORT: 3000
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci
  docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }},ghcr.io/${{ github.repository }}:latest
  supply-chain:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4
      - name: Generate SBOM (syft)
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:latest
          output-file: sbom.spdx.json
      - name: Scan image (grype)
        uses: anchore/scan-action@v4
        with:
          image: ghcr.io/${{ github.repository }}:latest
          fail-build: false
      - uses: actions/upload-artifact@v4
        with:
          name: supply-chain-artifacts
          path: |
            sbom.spdx.json
